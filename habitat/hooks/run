#!/bin/bash -xe
exec 2>&1

# Set credentials
TPP_URL="{{ cfg.tpp.url }}"
TPP_USER="{{ cfg.tpp.user }}"
TPP_PASSWORD="{{ cfg.tpp.password }}"
COMMON_NAME="{{ cfg.tpp.cn }}"
CERTIFICATE_ZONE="{{ cfg.tpp.zone }}"

# Set cert file
CERT_FILE="${COMMON_NAME}.cert"
KEY_FILE="${COMMON_NAME}.key"
CHAIN_FILE="${COMMON_NAME}.chain"

# Set cert path
CERT_PATH="{{pkg.svc_data_path}}/${CERT_FILE}"
KEY_PATH="{{pkg.svc_data_path}}/${KEY_FILE}"
CHAIN_PATH="{{pkg.svc_data_path}}/${CHAIN_FILE}"
CERT_ID="\\\\VED\\\\Policy\\\\${CERTIFICATE_ZONE}\\\\${COMMON_NAME}"

HOSTNAME="{{sys.hostname}}"

# Set DN paths for device and app creation
DEVICE_CREATION_DN="\\\\VED\\\\Policy\\\\Devices And Applications\\\\External\\\\${HOSTNAME}"
APP_CREATION_DN="\\\\VED\\\\Policy\\\\Devices And Applications\\\\External\\\\${HOSTNAME}\\\\${COMMON_NAME}-{{sys.ip}}{{sys.hostname}}"

RUN_ONCE=true

# Establish a CA
SSL_CERT_FILE="{{pkgPathFor "core/cacerts"}}/ssl/certs/cacert.pem"
export SSL_CERT_FILE

function enroll_new_cert() {
    # Enroll a new SSL cert
    exec vcert enroll -no-prompt \
        -tpp-url ${TPP_URL} \
        -tpp-user ${TPP_USER} \
        -tpp-password ${TPP_PASSWORD} \
        -cert-file ${CERT_PATH} \
        -key-file ${KEY_PATH} \
        -chain-file ${CHAIN_PATH} \
        -cn ${COMMON_NAME} \
        -z ${CERTIFICATE_ZONE}
}

function renew_cert() {
    # Renew the SSL cert
    exec vcert renew -no-prompt \
        -tpp-url ${TPP_URL} \
        -tpp-user ${TPP_USER} \
        -tpp-password ${TPP_PASSWORD} \
        -cert-file ${CERT_PATH} \
        -key-file ${KEY_PATH} \
        -chain-file ${CHAIN_PATH} \
        -id ${CERT_ID} \
        -z ${CERTIFICATE_ZONE}
}

function update_cert_config() {
    curr_date=$(exec date "+%s")
    toml_path="{{pkg.svc_data_path}}/apply.toml"

    # Export multiple variables into TOML for a one-time apply
    echo "[ssl]" > $toml_path
    echo "fqdn = \"$COMMON_NAME\"" >> $toml_path
    echo "cert = \"$CERT_PATH\"" >> $toml_path
    echo "key = \"$KEY_PATH\"" >> $toml_path
    echo "chain = \"$CHAIN_PATH\"" >> $toml_path
    hab config apply venafi-helper.{{svc.group}} $curr_date $toml_path
}

function check_expiry() {
    # Use Python to extract the client token for authentication
    tpp_token=$(curl -s -L \
            -H 'Content-Type: application/json' \
            -X POST \
            -d '{"Username":"'"$TPP_USER"'","Password":"'"$TPP_PASSWORD"'"}' \
            $TPP_URL/authorize | python -c "import sys, json; print json.load(sys.stdin)['APIKey']")

    # Get Certs
    cert_json=$(curl -s -L \
            -H 'Content-Type: application/json' \
            -H 'X-Venafi-API-Key: '$tpp_token \
            $TPP_URL/certificates)
    echo $cert_json

    valid_to=0
    while IFS="|" read -r dn x509; do
        if [ "$dn" = "$CERT_ID" ]; then
            # Extract only the date portion, 'date' has a weird bug of breaking on ':' from a bash script
            valid_to=$(jq --raw-output '.ValidTo' <<< "$x509" | cut -c1-10)
        fi
    done< <(jq --raw-output '.Certificates[] | "\(.DN)|\(.X509)"' <<< "$cert_json")


    # Convert to seconds
    valid_to=$(exec date -d "$valid_to" +%s)
    curr_date=$(exec date "+%s")

    if (({{ cfg.tpp.renew-threshold }} * 86400 + curr_date > valid_to)); then
        echo "Renewing expiring cert:"
        renew_cert
    fi
}

function create_dependencies() {
    tpp_token=$(curl -s -L \
        -H 'Content-Type: application/json' \
        -X POST \
        -d '{"Username":"'"$TPP_USER"'","Password":"'"$TPP_PASSWORD"'"}' \
        $TPP_URL/authorize | python -c "import sys, json; print json.load(sys.stdin)['APIKey']")

    device_creation=$(curl -s -L \
        -H 'Content-Type: application/json' \
        -H 'X-Venafi-API-Key: '$tpp_token \
        -X POST \
        -d '{ "ObjectDN": "'"$DEVICE_CREATION_DN"'", "Class": "Device", "NamedAttributeList": [ { "Name": "Description", "Value": "{{sys.hostname}} is managed by venafi-helper." } ] }' $TPP_URL/Config/Create )
    echo $device_creation

    application_creation=$(curl -s -L \
        -H 'Content-Type: application/json' \
        -H 'X-Venafi-API-Key: '$tpp_token \
        -X POST \
        -d '{ "ObjectDN": "'"$APP_CREATION_DN"'", "Class": "Basic", "NamedAttributeList": [ { "Name": "Description", "Value": "Basic app for certificate '${COMMON_NAME}'" }, { "Name": "Disabled", "Value": "0" } ] }' $TPP_URL/Config/Create )
    echo $application_creation

    associate_certs=$(curl -s -L \
        -H 'Content-Type: application/json' \
        -H 'X-Venafi-API-Key: '$tpp_token \
        -X POST \
        -d '{ "ApplicationDN": ["'"$APP_CREATION_DN"'"], "CertificateDN": "'"$CERT_ID"'" }' $TPP_URL/Certificates/Associate )
    echo $associate_certs
}

if [ ! -f ${CERT_PATH}  ]; then
    touch createdeps.tmp
    echo "Enrolling:"
    enroll_new_cert
fi

if test -f "createdeps.tmp"; then
    create_dependencies
    rm -f createdeps.tmp
fi

update_cert_config
check_expiry
sleep $(({{ cfg.tpp.expiry-check }} * 86400))

echo "Check complete. Sleeping for {{ cfg.tpp.expiry-check }} days"

{{#each cfg.servers as |server| ~}}
   echo "{{server.apache.zone}}"
{{/each ~}}
