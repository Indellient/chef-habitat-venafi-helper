#!/bin/bash -xe
exec 2>&1

# Set credentials
{{#if cfg.tpp.auth.url ~}}
TPP_URL="{{ cfg.tpp.auth.url }}"
TPP_USER="{{ cfg.tpp.auth.user }}"
TPP_PASSWORD="{{ cfg.tpp.auth.password }}"
TPP_TOKEN="{{ cfg.tpp.auth.token }}"
{{/if}}
COMMON_NAME="{{ cfg.cn }}"
{{#if cfg.cloud.auth.apikey ~}}
CLOUD_APIKEY="{{ cfg.cloud.auth.apikey }}"
{{/if}}

# Set device information
APP_INFO="Indellient-ChefHabitat-Helper"
INSTANCE="{{ sys.hostname }}{{#if cfg.tpp.device.app-name ~}}:{{ cfg.tpp.device.app-name }}{{/if ~}}"
{{#unless cfg.tpp.device.tls_address ~}}
TLS_ADDRESS="{{ sys.ip }}:{{ cfg.tpp.device.tls_port }}"
{{/unless}}
{{#if cfg.tpp.device.tls_address ~}}
TLS_ADDRESS="{{ cfg.tpp.device.tls_address }}:{{ cfg.tpp.device.tls_port }}"
{{/if ~}}

# Set certificate file names
CERT_FILE="${COMMON_NAME}.cert"
KEY_FILE="${COMMON_NAME}.key"
CHAIN_FILE="${COMMON_NAME}.chain"
ID_FILE="${COMMON_NAME}.id"

# Set cert path
CERT_PATH="{{pkg.svc_data_path}}/${CERT_FILE}"
KEY_PATH="{{pkg.svc_data_path}}/${KEY_FILE}"
CHAIN_PATH="{{pkg.svc_data_path}}/${CHAIN_FILE}"
ID_PATH="{{pkg.svc_data_path}}/${ID_FILE}"

# Establish a CA
SSL_CERT_FILE="{{pkgPathFor "core/cacerts"}}/ssl/certs/cacert.pem"
export SSL_CERT_FILE

# https://support.venafi.com/hc/en-us/articles/217991528-Introducing-VCert-API-Abstraction-for-DevOps
function enroll_new_cert() {
    exec vcert enroll -no-prompt {{#if cfg.cloud.auth.apikey ~}} -k ${CLOUD_APIKEY} {{/if ~}}{{#if cfg.tpp.auth.url ~}}{{#if cfg.tpp.auth.token ~}} -t ${TPP_TOKEN} {{/if ~}}{{#if cfg.tpp.auth.user ~}} -tpp-user ${TPP_USER} -tpp-password ${TPP_PASSWORD} {{/if ~}} -u ${TPP_URL} {{/if ~}} -z "{{ cfg.zone }}" -cert-file ${CERT_PATH} -key-file ${KEY_PATH} -chain-file ${CHAIN_PATH} -cn ${COMMON_NAME} -pickup-id-file ${ID_PATH} {{#if cfg.tpp.device.register ~}}-instance ${INSTANCE} -replace-instance -app-info ${APP_INFO} -tls-address ${TLS_ADDRESS}{{/if ~}}
    
    # TODO: This 'echo' command is filler because the "if" helper
    # On the previous line pulls the curly brace that closes the
    # function to the previous line (invalid shell syntax). 
    # Remove when this is resolved.
    echo "Proceeding to renewal check."
}

function renew_cert() {
    exec vcert renew -no-prompt {{#if cfg.cloud.auth.apikey ~}} -k ${CLOUD_APIKEY} {{/if ~}} {{#if cfg.tpp.auth.url ~}} -tpp-url ${TPP_URL} {{#if cfg.tpp.auth.token ~}} -t ${TPP_TOKEN} {{/if ~}}{{#if cfg.tpp.auth.user ~}} -tpp-user ${TPP_USER} -tpp-password ${TPP_PASSWORD} {{/if ~}}{{/if ~}} -cert-file ${CERT_PATH} -key-file ${KEY_PATH} -chain-file ${CHAIN_PATH} -id file:${ID_PATH} -z "{{ cfg.zone }}"
}

function update_cert_config() {
    curr_date=$(exec date "+%s")
    toml_path="{{pkg.svc_data_path}}/apply.toml"

    # Export multiple variables into TOML for a one-time apply
    echo "[ssl]" > $toml_path
    echo "fqdn = \"$COMMON_NAME\"" >> $toml_path
    echo "cert = \"$CERT_PATH\"" >> $toml_path
    echo "key = \"$KEY_PATH\"" >> $toml_path
    echo "chain = \"$CHAIN_PATH\"" >> $toml_path
    hab config apply venafi-helper.{{svc.group}} $curr_date $toml_path
}

function check_expiry() {
    valid_to=$(cut -d "=" -f2 <<< $(openssl x509 -enddate -noout -in ${CERT_PATH}))
    valid_to_epoch=$(date -d "${valid_to}" +"%s")
    curr_date=$(exec date "+%s")
    if (({{ cfg.renew-threshold }} * 86400 + curr_date > valid_to_epoch)); then
        echo "Renewing expiring cert:"
        renew_cert   
    fi
}

if [ ! -f ${CERT_PATH}  ]; then
    touch createdeps.tmp
    echo "Enrolling:"
    enroll_new_cert
fi

update_cert_config
check_expiry
echo "Check complete. Sleeping for {{ cfg.expiry-check }} days"
sleep $(({{ cfg.expiry-check }} * 86400))
